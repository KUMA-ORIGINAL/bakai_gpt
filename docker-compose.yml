
services:
  backend:
    build:
      context: backend
    env_file:
      - .env.dev
    restart: unless-stopped
    volumes:
      - ./backend/app:/app
    ports:
      - '8001:8000'
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy

  database:
    image: postgres:16.2-alpine3.18
    env_file: .env.dev
    restart: unless-stopped
    ports:
      - '5432:5432'
    volumes:
      - database-storage:/var/lib/postgresql/data
    healthcheck:
      test: [ 'CMD-SHELL', 'pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}' ]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  redis:
    image: redis
    container_name: chat-redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli ping | grep PONG" ]
      interval: 1s
      timeout: 3s
      retries: 5

  adminer:
    image: adminer
    ports:
      - "8080:8080"

#  pgadmin:
#    image: pgadmin4
#    environment:
#      PGADMIN_DEFAULT_EMAIL: admin@admin.org
#      PGADMIN_DEFAULT_PASSWORD: admin
#      PGADMIN_CONFIG_SERVER_MODE: 'False'
#    ports:
#      - "5050:80"

volumes:
  database-storage:
  redis_data:
